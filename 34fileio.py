# -*- coding: utf-8 -*-
f = open('32debug.py')
#f.read()
f.close()
#为open类初始化一个变量
try:
    f1 = open('32debug.py',encoding = 'utf-8')
    print(f1.read())
finally:
    if f1:
        f1.close()
        print('关闭文件F1')
#通过try和finally可以实现打开后无论是否报错，都关闭文件
#因为如果不关闭文件，会导致文件读取到内存当中，占用空间
with open('32debug.py','r',encoding = 'utf-8') as f2:
    print(f2.read(),'关闭文件第二次')
#with语句实现自动关闭，而不必每次都f.close
with open('32debug.py','r',encoding = 'utf-8') as f2:
    print(f2.read())

#例子，写一个文件
with open('writefile.txt','r+',encoding='utf-8') as f3:
    print(f3.read())
    f3.write('hello world')
    print(f3.name)
#这里读模式只能进行read操作，写模式只能进行write操作
 
#'r'： 以只读模式打开（缺省模式）（必须保证文件存在）
#'w'：以只写模式打开。若文件存在，则会自动清空文件，然后重新创建；若文件不存在，则新建文件。使用这个模式必须要保证文件所在目录存在，文件可以不存在。该模式下不能使用read*()方法
#
#'a'：以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建文件。该模式不能使用read*()方法。
#下面四个模式要和上面的模式组合使用
#'b'：以二进制模式打开
#'t'： 以文本模式打开（缺省模式）
#'+'：以读写模式打开
#'U'：以通用换行符模式打开
#
#常见的mode组合
#'r'或'rt'：     默认模式，文本读模式
#'w'或'wt'：  以文本写模式打开（打开前文件会被清空）
#'rb'：          以二进制读模式打开
#'ab'：         以二进制追加模式打开
#'wb'：        以二进制写模式打开（打开前文件会被清空）
#'r+'：         以文本读写模式打开，可以写到文件任何位置；默认写的指针开始指在文件开头, 因此会覆写文件
#'w+'：        以文本读写模式打开（打开前文件会被清空）。可以使用read*()
#'a+'：        以文本读写模式打开（写只能写在文件末尾）。可以使用read*()
#'rb+'：       以二进制读写模式打开
#'wb+'：     以二进制读写模式打开（打开前文件会被清空）
#
#'ab+'：      以二进制读写模式打开 
